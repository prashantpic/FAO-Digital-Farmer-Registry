version: '3.8'

services:
  postgres:
    image: ${POSTGRES_IMAGE_NAME}:${POSTGRES_IMAGE_TAG:-16-alpine}
    container_name: dfr_postgres_dev
    volumes:
      - dfr_postgres_data_dev:/var/lib/postgresql/data
      # If your custom postgres image doesn't include init scripts,
      # you can mount them directly for development:
      # - ../../components/postgres/initdb.d:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=${DFR_DB_USER}
      - POSTGRES_PASSWORD=${DFR_DB_PASSWORD}
      - POSTGRES_DB=${DFR_DB_NAME}
      # Environment variables for custom init script if used (e.g. 01_init_user_db.sh)
      # - DFR_APP_USER=${DFR_DB_USER} # If using a different app user
      # - DFR_APP_DB=${DFR_DB_NAME}   # If using a different app db
      # - DFR_APP_PASSWORD=${DFR_DB_PASSWORD} # If using a different app password
    ports:
      # Expose PostgreSQL port to the host for easier development access (e.g., pgAdmin)
      # Format: "HOST_PORT:CONTAINER_PORT"
      - "${DFR_DB_EXTERNAL_PORT:-5433}:5432"
    networks:
      - dfr_internal_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  odoo:
    # For local development, it's common to build the image directly
    # This ensures your latest code changes in components/odoo are used
    build:
      context: ../../components/odoo
      dockerfile: Dockerfile
      args:
        # Pass any build arguments defined in the Odoo Dockerfile
        # ODOO_VERSION: 18.0
    image: ${ODOO_IMAGE_NAME}:${ODOO_IMAGE_TAG:-dev} # Tag for locally built image
    container_name: dfr_odoo_dev
    depends_on:
      postgres:
        condition: service_healthy # Wait for postgres to be healthy
    volumes:
      # Mount custom addons for live development.
      # The source path (../../../dfr_addons) is relative to this docker-compose.yml file.
      # Adjust this path if your DFR addons are located elsewhere.
      - ../../../dfr_addons:/mnt/extra-addons
      # Persist Odoo filestore data (attachments, etc.)
      - dfr_odoo_data_dev:/var/lib/odoo
      # Optional: If you want to manage odoo.conf directly for dev instead of template substitution
      # Ensure the entrypoint.sh handles this or remove its config generation part.
      # - ./config/odoo.conf:/etc/odoo/odoo.conf
    environment:
      - ODOO_DB_HOST=postgres
      - ODOO_DB_PORT=5432
      - ODOO_DB_USER=${DFR_DB_USER}
      - ODOO_DB_PASSWORD=${DFR_DB_PASSWORD}
      - ODOO_DB_NAME=${DFR_DB_NAME}
      - ODOO_ADMIN_PASSWD=${ODOO_MASTER_PASSWORD} # Master admin password for Odoo
      - ODOO_LOAD_DEMO_DATA=${ODOO_LOAD_DEMO_DATA:-false} # Load demo data (true/false)
      - ODOO_WORKERS=${ODOO_DEV_WORKERS:-0} # 0 for easier debugging (uses multi-threading)
      - ODOO_LOG_LEVEL=${ODOO_DEV_LOG_LEVEL:-debug} # Set Odoo log level
      - ODOO_PROXY_MODE=${ODOO_PROXY_MODE:-True} # Enable if behind a reverse proxy like Nginx
      - ODOO_LIST_DB=${ODOO_LIST_DB:-True} # Show DB list on login page (dev only)
      # Add other ODOO_* env vars used by entrypoint.sh for odoo.conf.template substitution
      # e.g., ODOO_LIMIT_TIME_CPU, ODOO_LIMIT_TIME_REAL
      # - ODOO_AUTO_INIT_DB=true # If entrypoint handles auto-init
      # - ODOO_MODULES_TO_INIT_OR_UPDATE=dfr_base_module,another_dfr_module
    ports:
      # Expose Odoo HTTP port
      - "${ODOO_APP_EXTERNAL_PORT:-8069}:8069"
      # Expose Odoo Longpolling port (for live chat, notifications)
      - "${ODOO_LONGPOLLING_EXTERNAL_PORT:-8072}:8072"
    networks:
      - dfr_internal_network
    restart: unless-stopped
    # For debugging, you can override the entrypoint or command
    # entrypoint: ["sleep", "infinity"] # To keep container running for exec
    # command: odoo -- --dev=all # Enable Odoo developer mode with all assets

  nginx: # Optional for development, but good for testing proxy configuration
    # For local development, build the Nginx image if you have customisations
    build:
      context: ../../components/nginx
      dockerfile: Dockerfile
    image: ${NGINX_IMAGE_NAME}:${NGINX_IMAGE_TAG:-dev}
    container_name: dfr_nginx_dev
    depends_on:
      - odoo
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      # Mount Nginx configuration template. Nginx entrypoint script will substitute variables.
      - ../../components/nginx/config/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ../../components/nginx/config/sites-available/dfr.conf.template:/etc/nginx/templates/dfr.conf.template
      # For development, you might use self-signed certificates.
      # Create a 'certs' directory in 'environments/development/' and place dev.crt and dev.key there.
      # Example: ./certs/dev.crt and ./certs/dev.key
      - ./certs:/etc/nginx/ssl:ro
    environment:
      # Variables for nginx_entrypoint.sh to substitute in templates
      - NGINX_SERVER_NAME=${DEV_SERVER_NAME:-localhost}
      - ODOO_APP_SERVICE_HOST=odoo # Nginx will resolve 'odoo' to the Odoo container's IP
      - ODOO_APP_SERVICE_PORT=8069
      - ODOO_LONGPOLLING_PORT=8072
      - SSL_CERTIFICATE_FILE=${DEV_SSL_CERT_FILE:-dev.crt} # Name of cert file in /etc/nginx/ssl
      - SSL_CERTIFICATE_KEY_FILE=${DEV_SSL_KEY_FILE:-dev.key} # Name of key file in /etc/nginx/ssl
      # Variables for main nginx.conf.template
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
      # Variables for dfr.conf.template (timeouts etc.)
      - NGINX_PROXY_READ_TIMEOUT=720s
      - NGINX_PROXY_CONNECT_TIMEOUT=300s
      - NGINX_PROXY_SEND_TIMEOUT=300s
    networks:
      - dfr_internal_network
    restart: unless-stopped
    # If not using the nginx_entrypoint.sh from the Dockerfile, you might need a command here
    # to perform envsubst and start nginx, e.g.:
    # command: /bin/sh -c "envsubst < /etc/nginx/templates/dfr.conf.template > /etc/nginx/sites-enabled/dfr.conf && envsubst < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && exec nginx -g 'daemon off;'"

volumes:
  dfr_postgres_data_dev:
    driver: local # Or specify a named volume driver if needed
  dfr_odoo_data_dev:
    driver: local

networks:
  dfr_internal_network:
    # Use the common network defined in environments/common/docker-compose.common.yml
    # To use it, you need to run docker-compose with multiple files:
    # docker-compose -f ../common/docker-compose.common.yml -f docker-compose.yml up
    # If dfr_internal_network is defined in the common file:
    # name: dfr_internal_network # If defined as external in common
    # external: true
    # If defining it locally (simpler for standalone dev environment):
    driver: bridge
    name: dfr_dev_internal_network # Give it a unique name for dev