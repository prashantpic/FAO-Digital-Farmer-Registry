# This is an example static inventory file for the CKI Staging environment on AWS.
# In a production setup, a dynamic inventory script (e.g., using aws_ec2.py or custom boto3 script)
# is highly recommended to automatically fetch instances based on tags.

[odoo_app_servers]
# Host entries for Odoo application servers.
# Replace <terraform_output_odoo_ip_X> with actual IP addresses from Terraform outputs.
# dfr-odoo-ck-staging-01 ansible_host=<terraform_output_odoo_ip_1> ansible_user=ubuntu
# dfr-odoo-ck-staging-02 ansible_host=<terraform_output_odoo_ip_2> ansible_user=ubuntu

[postgres_db_servers]
# Host entries for PostgreSQL database servers.
# This group is primarily relevant if deploying PostgreSQL as a Docker container on an EC2 instance
# (i.e., when Terraform's deploy_managed_db_service variable is false).
# If using RDS, this group might be empty or used for client tools on an app server.
# dfr-pg-ck-staging-01 ansible_host=<terraform_output_pg_ip_1> ansible_user=ubuntu

[nginx_servers]
# Host entries for Nginx reverse proxy servers.
# Replace <terraform_output_nginx_ip_X> with actual IP addresses from Terraform outputs.
# dfr-nginx-ck-staging-01 ansible_host=<terraform_output_nginx_ip_1> ansible_user=ubuntu

[all:vars]
# Global variables applicable to all hosts in this inventory.
ansible_python_interpreter=/usr/bin/python3

# --- DFR Application Configuration (Example Variables) ---
# These variables would typically be defined in group_vars, host_vars, or passed as extra-vars.
# For sensitive values, use Ansible Vault or fetch from a secrets manager.

# Environment Identifiers
# country_code = "ck"
# environment_name = "staging"

# Docker Image Tags (examples, align with your ECR or Docker Hub tags)
# odoo_image_name = "123456789012.dkr.ecr.ap-southeast-2.amazonaws.com/dfr-odoo-app"
# odoo_image_tag = "ck-staging-v1.0.1"
# nginx_image_name = "123456789012.dkr.ecr.ap-southeast-2.amazonaws.com/dfr-nginx-proxy"
# nginx_image_tag = "ck-staging-v1.0.1"
# postgres_image_name = "postgres"
# postgres_image_tag = "15-alpine" # Or your custom DFR Postgres image tag

# Odoo Database Connection
# This needs to be set based on whether RDS is used or PostgreSQL is on an EC2 instance.
# If RDS: odoo_db_host = "<terraform_output_rds_endpoint>" (passed as extra-var or from group_vars)
# If PostgreSQL on EC2: odoo_db_host = "<ip_of_postgres_db_server_from_above_group>"
# odoo_db_port = 5432
# odoo_db_user = "odoo"
# odoo_db_name = "odoodb"
# Example of fetching password from AWS Secrets Manager (requires community.aws collection and boto3)
# odoo_db_password: "{{ lookup('aws_secretsmanager', 'cki-staging/db_password', region='ap-southeast-2') }}"
# odoo_admin_password: "{{ lookup('aws_secretsmanager', 'cki-staging/odoo_admin_password', region='ap-southeast-2') }}"

# Nginx Configuration
# server_domain_name = "ck-staging.dfr.example.org" # From Terraform
# ssl_certificate_path_on_host = "/etc/letsencrypt/live/{{ server_domain_name }}/fullchain.pem" # Example for Let's Encrypt
# ssl_certificate_key_path_on_host = "/etc/letsencrypt/live/{{ server_domain_name }}/privkey.pem" # Example for Let's Encrypt
# use_lets_encrypt = true # or false if using manually provided certs
# lets_encrypt_email = "admin@example.org" # Required if use_lets_encrypt is true

# Flag to indicate if RDS is being used (can be passed as extra-var from Terraform output)
# deploy_managed_db_service_flag = true

# SSH key for Ansible (if not using default or ssh-agent)
# ansible_ssh_private_key_file = ~/.ssh/dfr_ck_staging_key